version: '3.8'

services:
  # EcoTrack Ghana API
  api:
    build: .
    ports:
      - "8000:8000"
    environment:
      - ENVIRONMENT=production
      - DATABASE_URL=postgresql://ecotrack:ecotrack123@db:5432/ecotrack_ghana
      - JWT_SECRET_KEY=${JWT_SECRET_KEY:-change-this-in-production}
      - ALLOWED_ORIGINS=https://yourdomain.com,https://api.yourdomain.com
    depends_on:
      - db
      - redis
    volumes:
      - uploads_data:/app/uploads
      - logs_data:/app/logs
    restart: unless-stopped
    networks:
      - ecotrack_network

  # PostgreSQL Database
  db:
    image: postgres:15-alpine
    environment:
      POSTGRES_DB: ecotrack_ghana
      POSTGRES_USER: ecotrack
      POSTGRES_PASSWORD: ecotrack123
    volumes:
      - postgres_data:/var/lib/postgresql/data
    restart: unless-stopped
    networks:
      - ecotrack_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ecotrack"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Redis for caching (optional)
  redis:
    image: redis:7-alpine
    restart: unless-stopped
    networks:
      - ecotrack_network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Nginx Reverse Proxy (optional)
  nginx:
    image: nginx:alpine
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf
      - ./ssl:/etc/nginx/ssl  # SSL certificates
    depends_on:
      - api
    restart: unless-stopped
    networks:
      - ecotrack_network

volumes:
  postgres_data:
  uploads_data:
  logs_data:

networks:
  ecotrack_network:
    driver: bridge
